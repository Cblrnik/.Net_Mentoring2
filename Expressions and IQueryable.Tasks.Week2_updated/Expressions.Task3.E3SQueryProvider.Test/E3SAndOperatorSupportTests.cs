/*
 * This task is a bit harder than the previous two.
 * Feel free to change the E3SLinqProvider and any other classes if needed.
 * Possibly, after these changes you will need to rewrite existing tests to make them work again =).
 *
 * The task: implement support of && operator for IQueryable. The final request generated by FTSRequestGenerator, should
 * imply the following rules: https://kb.epam.com/display/EPME3SDEV/Telescope+public+REST+for+data#TelescopepublicRESTfordata-FTSRequestSyntax
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Expressions.Task3.E3SQueryProvider.Models.Entities;
using Microsoft.Extensions.Configuration;
using Xunit;

namespace Expressions.Task3.E3SQueryProvider.Test
{
    public class E3SAndOperatorSupportTests
    {
        private static IConfigurationRoot config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .Build();
        private static string BaseUrl = config["api:apiBaseUrl"];
        #region SubTask 3: AND operator support

        [Fact]
        public void TestAndQueryable()
        {
            var translator = new ExpressionToFtsRequestTranslator();
            Expression<Func<IQueryable<EmployeeEntity>, IQueryable<EmployeeEntity>>> expression
                = query => query.Where(e => e.Workstation == "EPRUIZHW006" && e.Manager.StartsWith("John"));

            var obj = translator.Translate(expression);

            var requestGenerator = new FtsRequestGenerator(BaseUrl);

            var request = requestGenerator.GenerateRequestUrl<EmployeeEntity>(obj, 0, 20);

            Assert.Contains("%7B%22query%22%3A%22Manager%3A(John*)%22%7D%5D", request.AbsoluteUri);
            Assert.Contains("%7B%22query%22%3A%22Workstation%3A(EPRUIZHW006)%22%7D", request.AbsoluteUri);
        }

        #endregion
    }
}
